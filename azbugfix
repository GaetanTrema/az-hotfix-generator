#!/bin/bash

# is jq installed?
if ! command -v jq &> /dev/null; then
  echo "⚠️ jq is not installed. Installing..."

  # Detect OS
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    if command -v apt &> /dev/null; then
      sudo apt update && sudo apt install -y jq
    elif command -v yum &> /dev/null; then
      sudo yum install -y jq
    else
      echo "❌ Package manager not detected. Install jq manually."
      exit 1
    fi
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    if command -v brew &> /dev/null; then
      brew install jq
    else
      echo "❌ Homebrew not detected. Install it with : /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
      exit 1
    fi
  else
    echo "❌ OS not recognized. Install jq manually."
    exit 1
  fi

  echo "✅ jq installed successfully."
fi
TITLE=""
TYPE="BUG"
DESCRIPTION=""
FROM_BRANCH="production"

# Parse named arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    --title)
      TITLE="$2"
      shift 2
      ;;
    --type)
      TYPE="$2"
      shift 2
      ;;
    --from-branch)
      FROM_BRANCH="$2"
      shift 2
      ;;
    --description)
      DESCRIPTION="$2"
      shift 2
      ;;
    *)
      echo "❌ Unknown option: $1"
      echo "Usage: $0 --title \"TITLE\" [--type \"TYPE\"] [--description \"DESCRIPTION\"]"
      exit 1
      ;;
  esac
done

# Check required argument
if [[ -z "$TITLE" ]]; then
  echo "❌ --title is required"
  exit 1
fi

if [[ -z "$DESCRIPTION" ]]; then
  echo "❌ --description is required"
  exit 1
fi

# get AZ_PROJECT, AZ_AREA, AZ_ORG from .env.hotfix
. ./.env.hotfix
echo $AZ_HF_AREA

echo "Using AZ_HF_PROJECT=$AZ_HF_PROJECT, AZ_HF_AREA=$AZ_HF_AREA, AZ_HF_ORG=$AZ_HF_ORG, AZ_HF_TAGS=$AZ_HF_TAGS"
if [[ -z "$AZ_HF_PROJECT" || -z "$AZ_HF_AREA" || -z "$AZ_HF_ORG" || -z "$AZ_HF_TAGS" ]]; then
  echo "❌ AZ_HF_PROJECT, AZ_HF_AREA, AZ_HF_ORG or AZ_HF_TAGS is not set in .env.hotfix"
  exit 1
fi

# get the current az user displayName from json output
AZ_USER=$(az ad signed-in-user show --query displayName -o tsv)
if [[ -z "$AZ_USER" ]]; then
  echo "❌ Could not get the current Azure DevOps user. Please make sure you are logged in with 'az login' and have access to the organization."
  exit 1
fi

# get the returned json object
JSON_OUT=$(az boards work-item create --title "$TITLE" \
 --type "$TYPE" \
 --area "$AZ_HF_AREA" \
 --project "$AZ_HF_PROJECT" \
 --org "$AZ_HF_ORG" \
 --assigned-to "$AZ_USER" \
 --fields "Tags=$AZ_HF_TAGS" "Repro Steps=$DESCRIPTION" )

TICKET_ID=$(echo "$JSON_OUT" | jq -r '.id')

# slugify the title
SLUG=$(echo "$TITLE" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:] _-' | tr ' ' '-')
# create the branch name 
BRANCH_NAME="hotfix/$TICKET_ID-$SLUG"
echo "Branch name : $BRANCH_NAME"

# create the branch from the specified branch
git checkout "$FROM_BRANCH"
git pull origin "$FROM_BRANCH"
git checkout -b "$BRANCH_NAME"
git push origin "$BRANCH_NAME"

echo -e "\033[1;32m=== Work Item Created ===\033[0m"
echo -e "URL : \033[1;32m$AZ_HF_ORG/$AZ_HF_PROJECT/_workitems/edit/$TICKET_ID\033[0m"